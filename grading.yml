# This is a separate section containing a few templates that we will use below.
# The & feature is built into YAML, it is not a special feature of the website.
# The section does not need to be called `templates` necessarily.

templates:
    1: &automatisch
        type: points
        subgrades:
            akkoord: boolean
        automatic:
            akkoord: -correctness_score.floor
        calculation: akkoord
        auto_publish: true
        hide_subgrades: true
    2: &automatisch_pass
        type: pass
        subgrades:
            akkoord: boolean
        automatic:
            akkoord: -correctness_score.floor
        calculation: akkoord
        auto_publish: true
        hide_calculated: true
    3: &aftekenen
        type: points
        subgrades:
            akkoord: boolean
        calculation: akkoord
        hide_subgrades: true
    4: &punten
        type: points
        subgrades:
            punten: float
        calculation: punten
        hide_subgrades: true
    5: &semiautomatisch
        type: points
        subgrades:
            akkoord: boolean
        automatic:
            akkoord: -correctness_score.floor
        calculation: akkoord
        hide_subgrades: true

# GRADES - contains definitions of how grades are structured. The names of the
# grades match the names of submits that may be defined in `submit.yml`
# elsewhere, but you can also create grades without an accompanying submit.
#
# The following properties are supported:
#
# - `type` can be `integer`, `float` or `pass`, which influences presentation
# and input
#
# - `subgrades` defines any extra numbers to be added to a grade, with their
# types `integer`, `pass`, `boolean` or `float`
#
# - note: if any subgrades are defined, teaching assistants are only allowed to
# enter those, and can't override the grade itself
#
# - `calculation` is an expression that is evaluated in the context of the
# subgrades, which means you can use any subgrade by name in that expression, as
# well as any standard Ruby objects and syntax
#
# - `automatic` is an expression that is evaluated in the context of any
# automatic grading results (as defined in `submit.yml`) - allowing the use of
# the variable `correctness_score`. It can only be used to fill in subgrades,
# but you can then use the `calculation` to transfer the value of a subgrade
# into the grade.
#
# - `hide_calculated` hides the calculated grade, only showing the entered
# subgrades (to de-emphasize grades for students)
#
# - `hide_subgrades` hides the subgrades, for example if you want to do a simple
# calculation but only show the resulting grade to students
#
# You can leave this out if grading isn't used or if each submit simply requires
# entering a final grade, no subgrades and no calculations.

grades:

    # Python

    weken: *automatisch_pass
    isalpha: *automatisch_pass
    lower: *automatisch_pass
    orakel: *automatisch_pass
    index: *automatisch_pass
    slice: *automatisch_pass
    capitalize: *automatisch_pass
    title: *automatisch_pass
    find: *automatisch_pass
    split: *automatisch_pass
    calculator: *automatisch_pass
    join: *automatisch_pass
    replace: *automatisch_pass
    camelcase: *automatisch_pass
    kenteken: *automatisch_pass
    split_real: *automatisch_pass
    python_voldoende: *punten

    # * opdrachten Python

    kenteken: *automatisch
    split_real: *automatisch

    # Datastructures

    sets: *automatisch
    dicts: *automatisch
    tuples: *automatisch
    recommend: *automatisch
    big-o-questions: *aftekenen

    # Objects

    queue: *automatisch
    cards: *automatisch
    war: *automatisch

    # adt

    card_implementations: *aftekenen
    list_adt: *automatisch
    dict_adt: *automatisch

    # * opdrachten adt

    priority_queue_adt: *punten

    # refactoring

    hangman_cc: *automatisch
    cash_tests: *punten
    profilers: *punten

    # oop

    palindrome: *aftekenen
    adventure-more:
        <<: *semiautomatisch
        subgrades:
            check_points: integer
            quality_points: integer
        automatic:
            check_points: (correctness_score * 7).round
        calculation: check_points + quality_points