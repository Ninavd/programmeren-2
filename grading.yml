# This is a separate section containing a few templates that we will use below.
# The & feature is built into YAML, it is not a special feature of the website.
# The section does not need to be called `templates` necessarily.

templates:
    1: &automatisch
        type: points
        subgrades:
            akkoord: boolean
        automatic:
            akkoord: -(correctness_score.floor)
        calculation: akkoord
        auto_publish: true
        hide_subgrades: true
    4: &semiautomatic
        type: float
        subgrades:
            done: boolean
        automatic:
            done: -(correctness_score.floor)
        calculation: done==-1 && 1.5 || 0
        hide_calculated: true
    2: &punten
        type: points
        subgrades:
            punten: float
        calculation: punten
        hide_subgrades: true
    3: &aftekenen
        type: points
        subgrades:
            akkoord: boolean
        calculation: -akkoord
        hide_subgrades: true

# GRADES - contains definitions of how grades are structured. The names of the
# grades match the names of submits that may be defined in `submit.yml`
# elsewhere, but you can also create grades without an accompanying submit.
#
# The following properties are supported:
#
# - `type` can be `integer`, `float` or `pass`, which influences presentation
# and input
#
# - `subgrades` defines any extra numbers to be added to a grade, with their
# types `integer`, `pass`, `boolean` or `float`
#
# - note: if any subgrades are defined, teaching assistants are only allowed to
# enter those, and can't override the grade itself
#
# - `calculation` is an expression that is evaluated in the context of the
# subgrades, which means you can use any subgrade by name in that expression, as
# well as any standard Ruby objects and syntax
#
# - `automatic` is an expression that is evaluated in the context of any
# automatic grading results (as defined in `submit.yml`) - allowing the use of
# the variable `correctness_score`. It can only be used to fill in subgrades,
# but you can then use the `calculation` to transfer the value of a subgrade
# into the grade.
#
# - `hide_calculated` hides the calculated grade, only showing the entered
# subgrades (to de-emphasize grades for students)
#
# - `hide_subgrades` hides the subgrades, for example if you want to do a simple
# calculation but only show the resulting grade to students
#
# You can leave this out if grading isn't used or if each submit simply requires
# entering a final grade, no subgrades and no calculations.

grades:

    # python_questions: *aftekenen
    mario:
        <<: *automatisch
        calculation: -akkoord * 2
    readability:
        <<: *automatisch
        calculation: -akkoord * 2
    schuifpuzzel:
        <<: *automatisch
        automatic:
            akkoord: -(correctness_score.floor/4)
        calculation: -akkoord * 2

    # lisp:
    #     <<: *automatisch
    #     automatic:
    #         akkoord: -(correctness_score.floor/4)
    #     calculation: -akkoord
    #     auto_publish: false
    # figuren:
    #     <<: *automatisch
    #     automatic:
    #         akkoord: -(correctness_score.floor/1)
    #     calculation: -akkoord * 2
    #     auto_publish: false
    # knapsack: *punten

    queue:
        <<: *automatisch
        automatic:
            akkoord: -correctness_score
        calculation: -akkoord
        # auto_publish: false
    cards:
        <<: *automatisch
        automatic:
            akkoord: -correctness_score
        calculation: -akkoord*2
        # auto_publish: false
    hangman-less:
        <<: *automatisch
        automatic:
            akkoord: -correctness_score
        calculation: -akkoord*4
        # auto_publish: false

    # python_contract: *aftekenen
    # python_type_hints: *aftekenen
    # python_tests: *aftekenen
    quality: *punten

    card_implementations:
        <<: *aftekenen
        calculation: -akkoord * 2
    containers_lists: *punten
    containers_dicts:
        <<: *aftekenen
        calculation: -akkoord * 2

    palindrome:
        <<: *aftekenen
        calculation: -akkoord * 2
    adventure-more: *punten

    cash_tests: *punten
    profilers: *punten
    # kalender_tests: *punten
    # deck_21:
    #     <<: *aftekenen
    #     calculation: -akkoord * 4


# CALCULATIONS - define the final grades for the course and the weights between
# subcomponents for each. Often, multiple final grades are differentiated by the
# choice of grades that are used for the calculation, for example calculating
# the "normal" final grade based on the "first exam", and the "resit" final
# grade based on the result of the second exam. Currently, running "calculate
# final grades" on the website will try to calculate all, which might result in
# useless non-grades getting calculated.
#
# Weights specify proportionally to each other and do not need to add up to
# anything in particular. If a weight of 0 is specified, the grade is not used
# in the calculation, but the grade must be "passed" for the calculation to
# succeed.
#
# You can leave this out if the site does not need to perform final grade
# calculations.

calculation:
    eindcijfer:
        module_1: 1
        module_2: 1
        module_3: 1
        module_4: 1
        module_5: 2
        # module_6: 2 # is twee modules gecombineerd

# SUB-CALCULATIONS - define the components of the course that may be used in
# final grade calculations. A few constraints can be specified.
#
# The following properties are supported:
#
# `submits` are the names of the grades/submits with accompanying weight for
# each
#
# `show_progress: true` will list the results of the grades in a table on
# students' progress pages
#
# `required: true` will only "pass" this part if all comprising grades are
# passed (used with pass/fail tests)
#
# `minimum: 5.5` will only "pass" this part if the weighed average of the grades
# is at least the specified minimum
#
# You can leave these out if unused in the `calculation` section.

module_1:
    type: points
    total_points: 6
    show_progress: true
    submits:
        # python_questions: 1
        mario: 2
        readability: 2
        schuifpuzzel: 2

module_2:
    type: points
    total_points: 6
    show_progress: true
    submits:
        queue: 1
        cards: 1
        hangman-less: 4
        # python_tests: 0 # oefenopdracht
        # kalender_tests: 1
        # lisp: 1
        # figuren: 1
        # knapsack: 1

module_3:
    type: points
    total_points: 6
    show_progress: true
    submits:
        # python_contract: 0
        # python_type_hints: 0
        # python_tests: 0
        quality: 6

module_4:
    type: points
    total_points: 10
    show_progress: true
    submits:
        card_implementations: 1
        containers_lists: 1
        containers_dicts: 1
        # deck_21: 1

module_5:
    type: points
    total_points: 12
    show_progress: true
    submits:
        palindrome: 2
        adventure-more: 10

extra:
    type: points
    total_points: 6
    show_progress: true
    submits:
        cash_tests: 1
        profilers: 1
